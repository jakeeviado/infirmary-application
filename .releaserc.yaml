branches:
  - master
plugins:
  - - "@semantic-release/commit-analyzer"
    - preset: conventionalcommits
      releaseRules:
        - breaking: true
          release: major
        - type: refactoring
          release: patch
      defaultBump: patch
  - - "@semantic-release/release-notes-generator"
    - preset: conventionalcommits
      presetConfig:
        types:
          - type: feat
            section: "New Feature(s)"
          - type: fix
            section: "Bug Fix(es)"
          - type: docs
            section: "Documentation Changes"
          - type: refactor
            section: "Code Refactor"
          - type: test
            section: "Tests"
          - type: perf
            section: "Performance Improvement(s)"
          - type: build
            section: "Build system"
          - type: refactoring
            section: "Refactoring"
  - - "@semantic-release/exec"
    - prepareCmd: >
        mvn versions:set -DnewVersion=${nextRelease.version} &&
        echo 'NEXT_VERSION=${nextRelease.version}' >> build.env
  - - "@semantic-release/changelog"
    - changelogFile: CHANGELOG.md
      changelogTitle: "# Changelogs"
  - - "@semantic-release/exec"
    - prepareCmd: >
        set -e;
        RELEASE_BRANCH=release-v${nextRelease.version};
        if git ls-remote --heads origin $RELEASE_BRANCH | grep -q $RELEASE_BRANCH; then
          git fetch origin $RELEASE_BRANCH &&
          git checkout $RELEASE_BRANCH &&
          git merge origin/master --no-edit &&
          mvn versions:set -DnewVersion=${nextRelease.version} &&
          npx semantic-release --no-ci &&
          git add pom.xml CHANGELOG.md build.env &&
          git commit --amend --no-edit &&
          git push origin $RELEASE_BRANCH --force;
        else
          git checkout -b $RELEASE_BRANCH &&
          git add pom.xml CHANGELOG.md build.env &&
          git commit -m "chore(release): ${nextRelease.version} [skip ci]" &&
          git push origin $RELEASE_BRANCH &&
          gh pr create --title "Release ${nextRelease.version}" --body "Automated release for version ${nextRelease.version}" --base master;
        fi
git commit -m "chore(release): ${nextRelease.version} [skip ci]" &&
  git push origin $RELEASE_BRANCH &&
  gh pr create --title "Release ${nextRelease.version}" --body "Automated release for version ${nextRelease.version}" --base master;
  fi
  - - "@semantic-release/github"
    - assets:
        - path: "target/package"
          label: "Windows Distribution"